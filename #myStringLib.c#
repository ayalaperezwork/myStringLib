#include<stdlib.h>
#include "myStringLib.h"

// Function to copy the string 'source' to the string 'target'
// limited by 'edge' chars
int mycpy(char * source, char * target, int edge){
  
  // Initializing variables
  char * limit = target + edge;

  // repeat while don't reach the last char or the target limit
  while((*source != '\0') && (target < limit)){
    *target = *source;
    target++;
    source++;     
  }
  *target = '\0';
  if((target == limit) && (*source != '\0')) return 2;
  
  else return 0;
}

int mycmp(char * str1, char * str2){
  // Start pointing to the first element of str1 and str2
  // Repeat while str1 and str2 are equals  null char in string 2
  while(*str1 == *str2){
    // If nth elements of str2 are '\0', end comparisson:
    // strings are equal
    if(*str2 == '\0') return 0;
    // point to the next char in both strings
    str1++;
    str2++;
  }
  // Strings are not equal
  return 1;
}

int myatoi(const char * strnumber){
  // Point the first element and change from ascii to natural,
  // Initialize digito & result
  int digito = *strnumber - 48;
  int result = 0;

  // While digito is number and is not end of string:
  while((digito >= 0 && digito <= 9) && *strnumber != '\0'){
    
    // Calculate the final number
    result = result * 10 + digito;

    // Point to the next element
    strnumber++;

    // Change element pointed from ascii to natural number
    digito = *strnumber - 48;
  }

  // Out of the cycle, if the pointed char is '\0', end and return value
  if(*strnumber == '\0') return result;

  // end and return ERROR (-1)
  return -1;
}

int myatoiHex(const char * strnumhex){
  // Point the first element and change from ascii to hexnum,
  // Initialize digito & result
  int digito = 0;
  int result = 0;

  // Converting pointed number from ascii to hex
  digito = asciiHex(strnumhex[0]);
  
  // While digito is number and is not end of string:
  while((digito != -1) && (*strnumhex != '\0')){
    
    // Calculate the final number
    result = result * 16 + digito;

    // Point to the next element
    strnumhex++;

    // Change element pointed from ascii to natural number
    digito = asciiHex(*strnumhex);
  }

  // Out of the cycle, if the pointed char is '\0', end and return value
  if(*strnumhex == '\0') return result;

  // end and return ERROR (-1)
  return -1;

}

int asciiHex(int number){
    int dixgito = 0;
    if(48 <= number && number <= 57)return (number - 48);
    else if(65 <= number && number <= 70)return (number - 55);
    else return -1;
}
  
long mystrtol(const char * str, char ** endptr, int base){}

